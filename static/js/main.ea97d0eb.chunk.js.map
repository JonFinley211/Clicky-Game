{"version":3,"sources":["components/NavMessage/index.js","components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/ClickItem/index.js","components/Footer/index.js","components/Game/index.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMessage","state","message","animating","renderMessage","prevState","currentScore","topScore","newState","console","log","this","props","setState","className","onAnimationEnd","Component","Nav","score","href","Header","Container","children","ClickItem","role","aria-label","onClick","handleItemClick","id","style","backgroundImage","image","shake","Footer","alt","src","Game","data","handleCorrectGuess","newData","shuffleData","handleIncorrectGuess","resetData","map","item","clicked","i","length","j","Math","floor","random","temp","guessedCorrectly","newItem","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4mCAkDeA,G,iNA5CbC,MAAQ,CACNC,QAAS,GACTC,WAAW,G,EAmBbC,cAAgB,WACd,OAAQ,EAAKH,MAAMC,SACnB,IAAK,UACH,MAAO,yBACT,IAAK,YACH,MAAO,2BACT,QACE,MAAO,6B,oFAvBoCG,GAAY,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,SAC3BC,EAAW,CAAEL,WAAW,GAClCM,QAAQC,IAAIF,GAENA,EAASN,QADU,IAAjBI,GAAmC,IAAbC,EACL,GACO,IAAjBD,GAAsBC,EAAW,EACvB,YAEA,UAGjBD,IAAiBK,KAAKC,MAAMN,cAAgBK,KAAKV,MAAMC,UAAYM,EAASN,SAC9ES,KAAKE,SAASL,K,+BAeR,IAAD,OACP,OACE,wBACEM,UAAWH,KAAKV,MAAME,UAAYQ,KAAKV,MAAMC,QAAU,GACvDa,eAAgB,kBAAM,EAAKF,SAAS,CAAEV,WAAW,MAEhDQ,KAAKP,qB,GAvCWY,c,MCkBVC,MAjBf,SAAaL,GAEX,OADAH,QAAQC,IAAIE,EAAMM,OAEhB,yBAAKJ,UAAU,UACb,4BACE,wBAAIA,UAAU,SACZ,uBAAGK,KAAK,KAAR,gBAEF,kBAAC,EAAD,CAAYb,aAAcM,EAAMN,aAAcC,SAAUK,EAAML,WAC9D,sCACUK,EAAMN,aADhB,iBAC4CM,EAAML,a,MCJ3Ca,MATf,WACE,OACE,4BAAQN,UAAU,UAChB,4CACA,0G,MCASO,MAJf,SAAmBT,GACjB,OAAO,0BAAME,UAAU,aAAaF,EAAMU,W,MCW7BC,MAZf,SAAmBX,GACjB,OACE,yBACEY,KAAK,MACLC,aAAW,aACXC,QAAS,kBAAMd,EAAMe,gBAAgBf,EAAMgB,KAC3CC,MAAO,CAAEC,gBAAgB,QAAD,OAAUlB,EAAMmB,MAAhB,OACxBjB,UAAS,oBAAeF,EAAMoB,MAAQ,SAAW,O,MCGxCC,MAVf,WACE,OACE,4BAAQnB,UAAU,UAChB,yBAAKA,UAAU,UAAf,gBACe,yBAAKoB,IAAI,QAAQC,IAAI,+B,OCmJ3BC,E,2MA/IbnC,MAAQ,CACNoC,OACA/B,aAAc,EACdC,SAAU,G,EAQZ+B,mBAAqB,SAAAC,GAInB,IAAMjC,EAAe,EAAKL,MAAMK,aAAe,EACnDG,QAAQC,IAAIJ,GACR,IAAIC,EAAW,EAAKN,MAAMM,SAC9BE,QAAQC,IAAIH,GAEJD,EAAeC,IACjBA,EAAWD,GAGb,EAAKO,SAAS,CACZwB,KAAM,EAAKG,YAAYD,GACvBjC,aAAcA,EACdC,SAAUA,K,EAIdkC,qBAAuB,SAAAJ,GACrB,EAAKxB,SAAS,CACZwB,KAAM,EAAKK,UAAUL,GACrB/B,aAAc,K,EAIlBoC,UAAY,SAAAL,GACV,IAAMK,EAAYL,EAAKM,KAAI,SAAAC,GAAI,sBAAUA,EAAV,CAAgBC,SAAS,OACxD,OAAO,EAAKL,YAAYE,I,EAG1BF,YAAc,SAAAH,GAEZ,IADA,IAAIS,EAAIT,EAAKU,OAAS,EACfD,EAAI,GAAG,CACZ,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOf,EAAKS,GAClBT,EAAKS,GAAKT,EAAKW,GACfX,EAAKW,GAAKI,EACVN,IAEF,OAAOT,G,EAGTV,gBAAkB,SAAAC,GACfnB,QAAQC,IAAI,mBACb,IAAI2C,GAAmB,EACjBd,EAAU,EAAKtC,MAAMoC,KAAKM,KAAI,SAAAC,GAClC,IAAMU,EAAO,eAAQV,GAOrB,OANIU,EAAQ1B,KAAOA,IACZ0B,EAAQT,UACXS,EAAQT,SAAU,EAClBQ,GAAmB,IAGhBC,KAETD,EACI,EAAKf,mBAAmBC,GACxB,EAAKE,qBAAqBF,I,mFA9D9B5B,KAAKE,SAAS,CAAEwB,KAAM1B,KAAK6B,YAAY7B,KAAKV,MAAMoC,U,+BAiE1C,IAAD,OACP,OACJ,kBAAC,EAAD,KAEQ,kBAAC,EAAD,CAAK9B,SAAUI,KAAKV,MAAMM,SAAUD,aAAcK,KAAKV,MAAMK,eAG7D,kBAAC,EAAD,MAqBCK,KAAKV,MAAMoC,KAAKM,KAAI,SAAAC,GAAI,OAGzB,kBAAC,EAAD,CACAjB,gBAAiB,EAAKA,gBACtBC,GAAIgB,EAAKhB,GACT2B,IAAKX,EAAKhB,GACVG,MAAOa,EAAKb,MACZc,QAASD,EAAKC,aAiBhB,kBAAC,EAAD,W,GA/Ha7B,aCHJwC,MAJf,WACE,OAAO,kBAAC,EAAD,OCMHC,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtE,QACfgE,UAAUC,cAAcQ,WAK1BjE,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBiE,OAAM,SAAAC,GACLnE,QAAQmE,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,eAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,eAAN,sBAEPzB,EAwCV,SAAiCO,GAE/BqB,MAAMrB,GACHI,MAAK,SAAAkB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvB,MAAK,SAAAC,GACjCA,EAAauB,aAAaxB,MAAK,WAC7BT,OAAOC,SAASiC,eAKpB9B,EAAgBC,MAGnBW,OAAM,WACLlE,QAAQC,IACN,oEA5DAoF,CAAwB9B,GAGxBD,EAAgBC,OChCxB+B,K","file":"static/js/main.ea97d0eb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\n// NavMessage renders an li tag containing an message for the user\r\n\r\nclass NavMessage extends Component {\r\n  state = {\r\n    message: \"\",\r\n    animating: false\r\n  };\r\n\r\n  componentDidUpdate({ currentScore, topScore }, prevState) {\r\n    const newState = { animating: true };\r\nconsole.log(newState)\r\n    if (currentScore === 0 && topScore === 0) {\r\n      newState.message = \"\";\r\n    } else if (currentScore === 0 && topScore > 0) {\r\n      newState.message = \"incorrect\";\r\n    } else {\r\n      newState.message = \"correct\";\r\n    }\r\n\r\n    if (currentScore !== this.props.currentScore || this.state.message !== newState.message) {\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  renderMessage = () => {\r\n    switch (this.state.message) {\r\n    case \"correct\":\r\n      return \"You guessed correctly!\";\r\n    case \"incorrect\":\r\n      return \"You guessed incorrectly!\";\r\n    default:\r\n      return \"Click an image to begin!\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <li\r\n        className={this.state.animating ? this.state.message : \"\"}\r\n        onAnimationEnd={() => this.setState({ animating: false })}\r\n      >\r\n        {this.renderMessage()}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavMessage;\r\n","import React from \"react\";\r\nimport NavMessage from \"../NavMessage\";\r\nimport \"./style.css\";\r\n\r\n// Component for the Navbar\r\n\r\nfunction Nav(props) {\r\n  console.log(props.score)\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li className=\"brand\">\r\n          <a href=\"/\">Clicky Game</a>\r\n        </li>\r\n        <NavMessage currentScore={props.currentScore} topScore={props.topScore} />\r\n        <li>\r\n          Score: {props.currentScore} | Top Score: {props.topScore}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>Clicky Game!</h1>\r\n      <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props) {\r\n  return <main className=\"container\">{props.children}</main>;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ClickItem(props) {\r\n  return (\r\n    <div\r\n      role=\"img\"\r\n      aria-label=\"click item\"\r\n      onClick={() => props.handleItemClick(props.id)}\r\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\r\n      className={`click-item${props.shake ? \" shake\" : \"\"}`}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ClickItem;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"bottom\">\r\n        Clicky Game! <img alt=\"react\" src=\"assets/images/react.svg\" />\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport Nav from \"../Nav\";\r\nimport Header from \"../Header\";\r\nimport Container from \"../Container\";\r\nimport ClickItem from \"../ClickItem\";\r\nimport Footer from \"../Footer\";\r\nimport data from \"../../data.json\";\r\n\r\n// FIXME: // See activity 29-Stu_FriendRefactor/Solved\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    data,\r\n    currentScore: 0,\r\n    topScore: 0\r\n   \r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ data: this.shuffleData(this.state.data) });\r\n  }\r\n\r\n  handleCorrectGuess = newData => {\r\n   \r\n\r\n    // get current score and add 1 to it\r\n    const currentScore = this.state.currentScore + 1;\r\nconsole.log(currentScore)\r\n    let topScore = this.state.topScore;\r\nconsole.log(topScore)\r\n    // check if current score is greater than topScore\r\n    if (currentScore > topScore) {\r\n      topScore = currentScore;\r\n    }\r\n\r\n    this.setState({\r\n      data: this.shuffleData(newData),\r\n      currentScore: currentScore,\r\n      topScore: topScore\r\n    });\r\n  };\r\n\r\n  handleIncorrectGuess = data => {\r\n    this.setState({\r\n      data: this.resetData(data),\r\n      currentScore: 0\r\n    });\r\n  };\r\n\r\n  resetData = data => {\r\n    const resetData = data.map(item => ({ ...item, clicked: false }));\r\n    return this.shuffleData(resetData);\r\n  };\r\n\r\n  shuffleData = data => {\r\n    let i = data.length - 1;\r\n    while (i > 0) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = data[i];\r\n      data[i] = data[j];\r\n      data[j] = temp;\r\n      i--;\r\n    }\r\n    return data;\r\n  };\r\n\r\n  handleItemClick = id => {\r\n     console.log(\"this is clicked\")\r\n    let guessedCorrectly = false;\r\n    const newData = this.state.data.map(item => {\r\n      const newItem = { ...item };\r\n      if (newItem.id === id) {\r\n        if (!newItem.clicked) {\r\n          newItem.clicked = true;\r\n          guessedCorrectly = true;\r\n        }\r\n      }\r\n      return newItem;\r\n    });\r\n    guessedCorrectly\r\n      ? this.handleCorrectGuess(newData)\r\n      : this.handleIncorrectGuess(newData);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n<Container>\r\n      \r\n        <Nav topScore={this.state.topScore} currentScore={this.state.currentScore}/>\r\n\r\n        \r\n        <Header></Header>\r\n      \r\n      \r\n        {/* {/* {this.state.data.map(card => {\r\n          return (\r\n            <div className=\"col-12 col-sm-3 col-md-2\" key={card.id}>\r\n              <img\r\n                src={item.image}\r\n                alt={item.name}\r\n                className=\"img-fluid img-thumbnail rounded\"\r\n                onClick={() => this.handleItemClick(item.id)}\r\n              /\r\n            \r\n\r\n\r\n          );\r\n\r\n        })\r\n\r\n\r\n        } */}\r\n        {this.state.data.map(item =>\r\n          \r\n          \r\n        <ClickItem\r\n        handleItemClick={this.handleItemClick}\r\n        id={item.id}\r\n        key={item.id}\r\n        image={item.image}\r\n        clicked={item.clicked}\r\n        // onClick={() => this.handleItemClick(item.id)}\r\n\r\n\r\n\r\n        />\r\n\r\n\r\n        //        <img\r\n        //         src={item.image}\r\n        //         alt={item.name}\r\n        //         className=\"img-fluid img-thumbnail rounded\"\r\n        //         onClick={() => this.handleItemClick(item.id)}></img>\r\n\r\n       \r\n        // </ClickItem>\r\n        )}\r\n      <Footer></Footer>\r\n      </Container>\r\n\r\n            \r\n        //   </div >\r\n          \r\n        // </div >\r\n\r\n          \r\n\r\n\r\n    )\r\n  };\r\n}\r\n\r\n\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport Game from \"./components/Game\";\r\n\r\nfunction App() {\r\n  return <Game />;\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}